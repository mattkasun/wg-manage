package models

type Configuration struct {
	PresharedKey *string `yaml:"presharedKey,omitempty"` // a base64 preShared key generated by wg genpsk. Optional, and may be omitted. This option adds an additional layer of symmetric-key cryptography to be mixed into the already existing public-key cryptography, for post-quantum resistance.
	Peers        []Peer  `yaml:"peers"`                  // all peers
}

type Peer struct {
	// general options
	// ---------------
	Name        string  `yaml:"name"`                  // item name
	Description *string `yaml:"description,omitempty"` // item description

	PeerOverrides map[string][]string `yaml:"peerOverrides,omitempty"` // overrides for peer sections. key is public key of a peer, value is a list of extra lines to be added to give peer

	// wireguard-specific options
	// --------------------------
	InterfaceSection        `yaml:"interfaceSection"`
	InterfaceSectionWgQuick `yaml:"interfaceSectionWgQuick,omitempty"`
	PeerSection             `yaml:"peerSection"`
	PeerSectionWgQuick      `yaml:"peerSectionWgQuick,omitempty"`
}

type InterfaceSection struct {
	PrivateKey string  `yaml:"privateKey"`           // a base64 private key generated by wg genkey. Required.
	ListenPort *int    `yaml:"listenPort,omitempty"` // a 16-bit port for listening. Optional; if not specified, chosen randomly.
	FwMark     *string `yaml:"fwMark,omitempty"`     // a 32-bit fwmark for outgoing packets. If set to 0 or "off", this option is disabled. May be specified in hexadecimal by prepending "0x". Optional.
}

type InterfaceSectionWgQuick struct {
	Address    []string `yaml:"address,omitempty"`    // wg-quick, a comma-separated list of IP (v4 or v6) addresses (optionally with CIDR masks) to be assigned to the interface. May be specified multiple times
	DNS        []string `yaml:"dns,omitempty"`        // wg-quick, a comma-separated list of IP (v4 or v6) addresses to be set as the interface’s DNS servers, or non-IP hostnames to be set as the interface’s DNS search domains. May be specified multiple times. Upon bringing the interface up, this runs ‘resolvconf -a tun.INTERFACE -m 0 -x‘ and upon bringing it down, this runs ‘resolvconf -d tun.INTERFACE‘. If these particular invocations of resolvconf(8) are undesirable, the PostUp and PostDown keys below may be used instead.
	SaveConfig *bool    `yaml:"saveConfig,omitempty"` // wg-quick, if set to ‘true’, the configuration is saved from the current state of the interface upon shutdown. Any changes made to the configuration file before the interface is removed will therefore be overwritten.
	PreUp      []string `yaml:"preUp,omitempty"`      // wg-quick, PreUp, PostUp, PreDown, PostDown — script snippets which will be executed by bash(1) before/after setting up/tearing down the interface, most commonly used to configure custom DNS options or firewall rules. The special string ‘%i’ is expanded to INTERFACE. Each one may be specified multiple times, in which case the commands are executed in order.
	PostUp     []string `yaml:"postUp,omitempty"`     // wg-quick, PreUp, PostUp, PreDown, PostDown — script snippets which will be executed by bash(1) before/after setting up/tearing down the interface, most commonly used to configure custom DNS options or firewall rules. The special string ‘%i’ is expanded to INTERFACE. Each one may be specified multiple times, in which case the commands are executed in order.
	PreDown    []string `yaml:"preDown,omitempty"`    // wg-quick, PreUp, PostUp, PreDown, PostDown — script snippets which will be executed by bash(1) before/after setting up/tearing down the interface, most commonly used to configure custom DNS options or firewall rules. The special string ‘%i’ is expanded to INTERFACE. Each one may be specified multiple times, in which case the commands are executed in order.
	PostDown   []string `yaml:"postDown,omitempty"`   // wg-quick, PreUp, PostUp, PreDown, PostDown — script snippets which will be executed by bash(1) before/after setting up/tearing down the interface, most commonly used to configure custom DNS options or firewall rules. The special string ‘%i’ is expanded to INTERFACE. Each one may be specified multiple times, in which case the commands are executed in order.
}

type PeerSection struct {
	PublicKey           string   `yaml:"publicKey"`                     // a base64 public key calculated by wg pubkey from a private key, and usually transmitted out of band to the author of the configuration file. Required.
	AllowedIps          []string `yaml:"allowedIps"`                    // a comma-separated list of IP (v4 or v6) addresses with CIDR masks from which incoming traffic for this peer is allowed and to which outgoing traffic for this peer is directed. The catch-all 0.0.0.0/0 may be specified for matching all IPv4 addresses, and ::/0 may be specified for matching all IPv6 addresses. May be specified multiple times.
	Endpoint            *string  `yaml:"endpoint,omitempty"`            // an endpoint IP or hostname, followed by a colon, and then a port number. This endpoint will be updated automatically to the most recent source IP address and port of correctly authenticated packets from the peer. Optional.
	PersistentKeepalive *int     `yaml:"persistentKeepalive,omitempty"` // a seconds interval, between 1 and 65535 inclusive, of how often to send an authenticated empty packet to the peer for the purpose of keeping a stateful firewall or NAT mapping valid persistently. For example, if the interface very rarely sends traffic, but it might at anytime receive traffic from a peer, and it is behind NAT, the interface might benefit from having a persistent keepalive interval of 25 seconds. If set to 0 or "off", this option is disabled. By default or when unspecified, this option is off. Most users will not need this. Optional.
}

type PeerSectionWgQuick struct {
	MTU   *string `yaml:"mtu,omitempty"`   // wg-quick, if not specified, the MTU is automatically determined from the endpoint addresses or the system default route, which is usually a sane choice. However, to manually specify an MTU to override this automatic discovery, this value may be specified explicitly.
	Table *string `yaml:"table,omitempty"` // wg-quick, Controls the routing table to which routes are added. There are two special values: ‘off’ disables the creation of routes altogether, and ‘auto’ (the default) adds routes to the default table and enables special handling of default routes.
}
